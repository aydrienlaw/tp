@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":ArgumentParser" as ArgumentParser
participant ":InputValidator" as InputValidator
participant ":SetBudgetCommand" as SetBudgetCommand
participant ":InvalidCommand" as InvalidCommand
participant ":ExpenseManager" as ExpenseManager
participant ":Ui" as Ui

activate Main

User -> Main : enters "setbudget a/500"

Main -> Parser : parse("setbudget a/500")
activate Parser

Parser -> Parser : parseSetBudgetCommand("a/500")
activate Parser

create ArgumentParser
Parser -> ArgumentParser : ArgumentParser("a/500")
activate ArgumentParser
ArgumentParser --> Parser
deactivate ArgumentParser

Parser -> ArgumentParser : getValue("a/")
activate ArgumentParser
ArgumentParser --> Parser : "500"
deactivate ArgumentParser

alt valid amount

    Parser -> InputValidator : validateAmount("500", "setbudget")
    activate InputValidator
    InputValidator --> Parser : 500.0
    deactivate InputValidator

    create SetBudgetCommand
    Parser -> SetBudgetCommand : SetBudgetCommand(500)
    activate SetBudgetCommand
    SetBudgetCommand --> Parser
    deactivate SetBudgetCommand
    Parser --> Main : setBudgetCommand

else invalid amount

    Parser -> InputValidator : validateAmount("invalid", "setbudget")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException e
    deactivate InputValidator
    destroy ArgumentParser
    deactivate Parser

    create InvalidCommand
    Parser -> InvalidCommand: InvalidCommand(e)
    activate InvalidCommand
    InvalidCommand --> Parser
    deactivate InvalidCommand
    Parser --> Main : invalidCommand

end

deactivate Parser

deactivate Parser

alt command is SetBudgetCommand
    Main -> SetBudgetCommand : execute(expenseManager, ui)
    activate SetBudgetCommand

    SetBudgetCommand -> ExpenseManager : setBudget(500.0)
    activate ExpenseManager
    deactivate ExpenseManager

    SetBudgetCommand -> Ui : showNewBudget(500.0)
    activate Ui
    Ui --> User : displays confirmation
    deactivate Ui

    deactivate SetBudgetCommand
    destroy SetBudgetCommand

else command is InvalidCommand
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand

    InvalidCommand -> Ui : showSetBudgetUsage()
    activate Ui
    Ui --> User : displays usage message
    deactivate Ui

    deactivate InvalidCommand
    destroy InvalidCommand
end

deactivate Main
@enduml
