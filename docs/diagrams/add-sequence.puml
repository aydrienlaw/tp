@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":ArgumentParser" as ArgumentParser
participant ":InputValidator" as InputValidator
participant ":AddCommand" as AddCommand
participant ":InvalidCommand" as InvalidCommand
participant ":Expense" as Expense
participant ":ExpenseManager" as ExpenseManager
participant ":Ui" as Ui

activate Main

User -> Main : enters "add a/10 desc/lunch cat/food"

Main -> Parser : parse("add a/10 desc/lunch cat/food")
activate Parser

Parser -> Parser : parseAddCommand("a/10 desc/lunch cat/food")
activate Parser

create ArgumentParser
Parser -> ArgumentParser : ArgumentParser("a/10 desc/lunch cat/food")
activate ArgumentParser
ArgumentParser --> Parser:
deactivate ArgumentParser

Parser -> ArgumentParser : getValue("a/")
activate ArgumentParser
ArgumentParser --> Parser : "10"
deactivate ArgumentParser

Parser -> ArgumentParser : getValue("desc/")
activate ArgumentParser
ArgumentParser --> Parser : "lunch"
deactivate ArgumentParser

opt get optional category
    Parser -> ArgumentParser : getOptionalValue("cat/")
    activate ArgumentParser
    ArgumentParser --> Parser : "food"
    deactivate ArgumentParser
end

alt valid inputs

    Parser -> InputValidator : validateAmount("10", "add")
    activate InputValidator
    InputValidator --> Parser : 10.0
    deactivate InputValidator
    Parser -> InputValidator : validateDescription("lunch", "add")
    activate InputValidator
    InputValidator --> Parser : "lunch"
    deactivate InputValidator

    opt category provided
        Parser -> InputValidator : validateCategory("food", "add")
        activate InputValidator
        InputValidator --> Parser : "food"
        deactivate InputValidator
    end

    create AddCommand
    Parser -> AddCommand : AddCommand(10.0, "lunch", "food")
    activate AddCommand
    AddCommand --> Parser
    deactivate AddCommand
    Parser --> Main : addCommand

else invalid inputs

    Parser -> InputValidator : validateAmount("invalid", "add")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException e
    deactivate InputValidator

    deactivate Parser
    destroy ArgumentParser


    create InvalidCommand
    Parser -> InvalidCommand: InvalidCommand(e)
    activate InvalidCommand
    InvalidCommand --> Parser
    deactivate InvalidCommand
    Parser --> Main : invalidCommand

end

deactivate Parser

alt command is AddCommand
    Main -> AddCommand : execute(expenseManager, ui)
    activate AddCommand

    create Expense
    AddCommand -> Expense : Expense(10.0, "lunch", "food")
    activate Expense
    Expense --> AddCommand
    deactivate Expense

    AddCommand -> ExpenseManager : addExpense(expense)
    activate ExpenseManager
    deactivate ExpenseManager

    AddCommand -> Ui : showNewExpense(expense)
    activate Ui
    Ui --> User : displays confirmation
    deactivate Ui

    deactivate AddCommand
    destroy Expense
    destroy AddCommand

else command is InvalidCommand
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand

    InvalidCommand -> Ui : showAddUsage()
    activate Ui
    Ui --> User : displays usage message
    deactivate Ui

    deactivate InvalidCommand
    destroy InvalidCommand
end

deactivate Main
@enduml
