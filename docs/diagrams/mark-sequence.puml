@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":InputValidator" as InputValidator
participant ":MarkCommand" as MarkCommand
participant ":InvalidCommand" as InvalidCommand
participant ":ExpenseManager" as ExpenseManager
participant ":Ui" as Ui

User -> Main : enters "mark 1"
activate Main

Main -> Parser : parse("mark 1")
activate Parser

Parser -> Parser : parseMarkCommand("1")
activate Parser

alt valid index
    Parser -> InputValidator : validateIndex("1", "mark")
    activate InputValidator
    InputValidator --> Parser : 1
    deactivate InputValidator

    create MarkCommand
    Parser -> MarkCommand : MarkCommand(1)
    activate MarkCommand
    MarkCommand --> Parser
    deactivate MarkCommand
    Parser --> Main : markCommand

else invalid index
    Parser -> InputValidator : validateIndex("invalid", "mark")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException e
    deactivate InputValidator
    deactivate Parser

    create InvalidCommand
    Parser -> InvalidCommand: InvalidCommand(e)
    activate InvalidCommand
    InvalidCommand --> Parser
    deactivate InvalidCommand
    Parser --> Main : invalidCommand
end

deactivate Parser

alt command is MarkCommand
    Main -> MarkCommand : execute(expenseManager, ui)
    activate MarkCommand

    MarkCommand -> ExpenseManager : markExpense(1)
    activate ExpenseManager
    ExpenseManager --> MarkCommand : markedExpense
    deactivate ExpenseManager


    MarkCommand -> Ui : showMarkedExpense(markedExpense)
    activate Ui
    Ui --> User : displays confirmation
    deactivate Ui

    MarkCommand -> ExpenseManager : determineBudgetStatus()
    activate ExpenseManager
    ExpenseManager --> MarkCommand : status
    deactivate ExpenseManager

    opt status != OK
        MarkCommand -> Ui : showBudgetStatus(status, remainingBalance)
        activate Ui
        Ui --> User : displays budget alert
        deactivate Ui
    end

deactivate MarkCommand
destroy MarkCommand

else command is InvalidCommand
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand

    InvalidCommand -> Ui : showMarkUsage()
    activate Ui
    Ui --> User : displays usage message
    deactivate Ui

    deactivate InvalidCommand
    destroy InvalidCommand
end

deactivate Main
@enduml